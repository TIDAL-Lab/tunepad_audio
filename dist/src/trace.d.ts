import { Note } from "./note";
/**
 * A Trace object is generated by the python compiler and represents a list of
 * audio events that generate music.
 */
export declare class MusicTrace {
    trace: TraceEvent[];
    get length(): number;
    get isEmpty(): boolean;
    private _beats;
    get beats(): number;
    private _playhead;
    private _minNote;
    get minNote(): number;
    get minOctave(): number;
    private _maxNote;
    get maxNote(): number;
    get maxOctave(): number;
    get noteRange(): number;
    get octaveRange(): number;
    private _noteCount;
    get noteCount(): number;
    constructor();
    clear(): void;
    fromPython(list: Array<Map<string, any>>): void;
    get messages(): TraceEvent[];
    get unitTests(): TraceEvent[];
    get passes(): TraceEvent[];
    get fails(): TraceEvent[];
    /**
     * Compare two trace objects to see if they are equivalent except for line numbers
     */
    isEquivalent(other: MusicTrace): boolean;
    /**
     * Add an event to the trace
     */
    addTraceEvent(e: Map<string, any>): void;
    private _addTraceEvent;
    /**
     * Return a list of events for the given trace group number
     */
    getTraceGroup(bug: number): Array<TraceEvent>;
}
/**
 * Audio trace of a program's execution. Trace events are generated by
 * python and then replayed to generate sounds and animation.
 */
export declare class TraceEvent {
    static readonly PLAY = "play";
    static readonly SOUND = "sound";
    static readonly REST = "rest";
    static readonly PUSH_FX = "push_fx";
    static readonly POP_FX = "pop_fx";
    static readonly MESSAGE = "message";
    private static _TRACE_ID;
    readonly id: number;
    readonly command: string;
    readonly time: number;
    duration: number;
    get end(): number;
    line: number;
    note: Note;
    trace_group: number;
    params: Map<string, any>;
    constructor(command: string, time: number);
    clone(): TraceEvent;
    static fromMap(m: Map<string, any>): TraceEvent;
    /**
     * Are two trace events the same except for their line numbers
     */
    isEquivalent(other: TraceEvent): boolean;
}
//# sourceMappingURL=trace.d.ts.map